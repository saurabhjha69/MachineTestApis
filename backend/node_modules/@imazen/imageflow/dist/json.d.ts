import { Constrain, Rotate90, Rotate180, Rotate270, Region, RegionPercentage, CropWhitespace, FillRect, ExpandCanvas, WatermarkOption, Preset, ColorFilterSRGBValue, DrawExactImageToCoordinates, ConstrainHints, CompositingMode, IOOperation, DecodeOptions } from './types';
export declare class Steps {
    private graph;
    private vertex;
    private ioID;
    private inputs;
    private outputs;
    private last;
    private decodeValue;
    constructor(operation: IOOperation, options: DecodeOptions);
    decode(operation: IOOperation, options: DecodeOptions): this;
    constrain(constraint: Constrain): Steps;
    constrainWithin(width: number, height: number): Steps;
    branch(f: (arg: Steps) => any): Steps;
    drawImageExactTo(f: (arg: Steps) => any, coordinates: DrawExactImageToCoordinates, blend: CompositingMode, hint: ConstrainHints): this;
    execute(): Promise<Object>;
    rotate90(): Steps;
    rotate180(): Steps;
    rotate270(): Steps;
    rotate(rotate: Rotate180 | Rotate270 | Rotate90): Steps;
    region(regionData: Region | RegionPercentage): Steps;
    cropWhiteSpace(data: CropWhitespace): Steps;
    fillRect(data: FillRect): Steps;
    expandCanvas(data: ExpandCanvas): Steps;
    flipHorizontal(): Steps;
    flipVertical(): Steps;
    watermark(operation: IOOperation, watermarkOption: WatermarkOption): Steps;
    encode(operation: IOOperation, decodeData: Preset): Steps;
    colorFilterInvert(): Steps;
    colorFilterGrayscaleRY(): Steps;
    colorFilterGrayscaleBt709(): Steps;
    colorFilterGrayscaleFlat(): Steps;
    colorFilterGrayscaleNtsc(): Steps;
    colorFilterAlpha(value: number): Steps;
    colorFilterBrightness(value: number): Steps;
    colorFilterContrast(value: number): Steps;
    colorFilter(value: ColorFilterSRGBValue): this;
    copyRectangle(f: (args: Steps) => any, coordinates: DrawExactImageToCoordinates, fromX: number, fromY: number): this;
    command(value: string): Steps;
    executeCommand(commandValue: string, input: IOOperation, output: IOOperation): Promise<any>;
    distort(w: number, h: number, hint?: ConstrainHints | null): this;
}

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeJob = void 0;
const native_1 = require("./native");
class NativeJob {
    constructor() {
        this.inUse = false;
        this.internalJob = new native_1.default();
    }
    addInputBytes(ioId, bytes) {
        if (this.inUse) {
            throw new Error("Already running a Job");
        }
        else {
            this.internalJob.addInputBytesCopied(ioId, bytes);
        }
    }
    getOutputBufferBytes(ioId) {
        if (this.inUse) {
            throw new Error("Already running a Job");
        }
        else {
            return this.internalJob.getOutputBufferBytes(ioId);
        }
    }
    addOutputBuffer(ioId) {
        if (this.inUse) {
            throw new Error("Already running a Job");
        }
        else {
            this.internalJob.addOutputBuffer(ioId);
        }
    }
    message(endPoint, tasks) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.inUse) {
                throw new Error("Already running a Job");
            }
            else {
                this.inUse = true;
                const response = yield this.internalJob.message(endPoint, tasks);
                this.inUse = false;
                return response;
            }
        });
    }
    messageSync(endPoint, tasks) {
        if (this.inUse) {
            throw new Error("Already running a Job");
        }
        else {
            this.inUse = true;
            const response = this.internalJob.messageSync(endPoint, tasks);
            this.inUse = false;
            return response;
        }
    }
}
exports.NativeJob = NativeJob;
var native_2 = require("./native");
Object.defineProperty(exports, "getLongVersionString", { enumerable: true, get: function () { return native_2.getLongVersionString; } });
//# sourceMappingURL=job.js.map